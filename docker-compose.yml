version: '3.8'
services:
  inventory-service-db:
    image: "postgres:14"    
    environment:
      POSTGRES_DB: dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
    command: postgres -c 'log_statement=all' -c 'max_connections=500'
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M

  inventory-service-redis:
    image: "redis:6"    

  inventory-service-migrations:
    build:
      context: .
      dockerfile: InventoryService.Migrations.Dockerfile
    command: "sleep 5 && ./migrations-bundle --connection 'User ID=dev;Host=inventory-service-db;Port=5432; Database=dev; Username=dev; Password=dev'"    
    depends_on:
      - inventory-service-db


  # order-service-db:
  #   image: "postgres:14"    
  #   environment:
  #     POSTGRES_DB: dev
  #     POSTGRES_USER: dev
  #     POSTGRES_PASSWORD: dev
  #   command: postgres -c 'log_statement=all' -c 'max_connections=500'
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 100M
  #       reservations:
  #         memory: 50M

  # order-service-redis:
  #   image: "redis:6"    

  # order-service-migrations:
  #   build:
  #     context: .
  #     dockerfile: OrderService.Migrations.Dockerfile
  #   command: "sleep 5 && ./migrations-bundle --connection 'User ID=dev;Host=order-service-db;Port=5432; Database=dev; Username=dev; Password=dev'"    
  #   depends_on:
  #     - order-service-db      

  # token-service-db:
  #   image: "postgres:14"    
  #   environment:
  #     POSTGRES_DB: dev
  #     POSTGRES_USER: dev
  #     POSTGRES_PASSWORD: dev
  #   command: postgres -c 'log_statement=all' -c 'max_connections=500'
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 100M
  #       reservations:
  #         memory: 50M

  # token-service-redis:
  #   image: "redis:6"    

  # token-service-migrations:
  #   build:
  #     context: .
  #     dockerfile: TokenService.Migrations.Dockerfile
  #   command: "sleep 5 && ./migrations-bundle --connection 'User ID=dev;Host=token-service-db;Port=5432; Database=dev; Username=dev; Password=dev'"    
  #   depends_on:
  #     - token-service-db

  # user-service-db:
  #   image: "postgres:14"    
  #   environment:
  #     POSTGRES_DB: dev
  #     POSTGRES_USER: dev
  #     POSTGRES_PASSWORD: dev
  #   command: postgres -c 'log_statement=all' -c 'max_connections=500'
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 100M
  #       reservations:
  #         memory: 50M

  # user-service-redis:
  #   image: "redis:6"    

  # user-service-migrations:
  #   build:
  #     context: .
  #     dockerfile: UserService.Migrations.Dockerfile
  #   command: "sleep 5 && ./migrations-bundle --connection 'User ID=dev;Host=user-service-db;Port=5432; Database=dev; Username=dev; Password=dev'"    
  #   depends_on:
  #     - user-service-db


  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.1
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
    depends_on:
      - zookeeper
  
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-logout-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-login-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-register-topic --replication-factor 1 --partitions 1

      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order-failed-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order-created-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic balance-deducted-topic --replication-factor 1 --partitions 1

      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic balance-deduction-failed-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic books-packed-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic books-packing-failed-topic --replication-factor 1 --partitions 1            

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    




  # user-service-api:
  #   build:
  #     context: .
  #     dockerfile: UserService.Dockerfile    
  #   depends_on:
  #     - user-service-db    
  #     - user-service-redis
  #     - kafka  

  inventory-service-api:
    build:
      context: .
      dockerfile: InventoryService.Dockerfile    
    environment:
      - ConnectionStrings__PostgreSqlConnection="User ID=dev;Host=inventory-service-db;Port=5432; Database=dev; Username=dev; Password=dev"
      - ConnectionStrings__RedisConnection="inventory-service-redis:6379"
      - Kafka__BootstrapServers="kafka:29092"
    depends_on:
      - inventory-service-db    
      - inventory-service-redis
      - kafka